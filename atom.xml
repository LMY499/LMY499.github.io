<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LMY</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-20T13:08:15.462Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>小李同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>继承多态抽象类的小结</title>
    <link href="http://example.com/2024/10/20/%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/10/20/%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-10-20T12:40:00.869Z</published>
    <updated>2024-10-20T13:08:15.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>继承：就是子类继承父类的属性和行为，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的非私有的属性和行为。</p><h2 id="继承的格式"><a href="#继承的格式" class="headerlink" title="继承的格式"></a>继承的格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java是单继承的，一个类只能继承一个直接父类，跟现实世界很像，但是Java中的子类是更加强大的。</p><h2 id="子类不能继承的内容"><a href="#子类不能继承的内容" class="headerlink" title="子类不能继承的内容"></a>子类不能继承的内容</h2><p>子类不能继承父类的构造方法。</p><p>值得注意的是子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过getter&#x2F;setter方法访问父类的private成员变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Demo03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Zi z = new Zi();</span><br><span class="line">        System.out.println(z.num1);</span><br><span class="line">//System.out.println(z.num2); // 私有的子类无法使用</span><br><span class="line">        // 通过getter/setter方法访问父类的private成员变量</span><br><span class="line">        System.out.println(z.getNum2());</span><br><span class="line"></span><br><span class="line">        z.show1();</span><br><span class="line">        // z.show2(); // 私有的子类无法使用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Fu &#123;</span><br><span class="line">    public int num1 = 10;</span><br><span class="line">    private int num2 = 20;</span><br><span class="line"></span><br><span class="line">    public void show1() &#123;</span><br><span class="line">        System.out.println(&quot;show1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void show2() &#123;</span><br><span class="line">        System.out.println(&quot;show2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getNum2() &#123;</span><br><span class="line">        return num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNum2(int num2) &#123;</span><br><span class="line">        this.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Zi extends Fu &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super访问父类成员变量"><a href="#super访问父类成员变量" class="headerlink" title="super访问父类成员变量"></a>super访问父类成员变量</h3><p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用super 关键字，修饰父类成员变量，类似于之前学过的 this 。<br>需要注意的是：super代表的是父类对象的引用，this代表的是当前对象的引用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super.父类成员变量名</span><br></pre></td></tr></table></figure><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><p>方法重写 ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。声明不变，重新实现。<br>发生在子父类之间的关系。 子类继承了父类的方法，但是子类觉得父类的这方法不足以满足自己的需求，子类重新写了一个与父类同名的方法，以便覆盖父类的该方方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Animal  &#123;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;动物跑的很快！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void cry()&#123;</span><br><span class="line">        System.out.println(&quot;动物都可以叫~~~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个猫类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Cat extends Animal &#123;</span><br><span class="line">    public void cry()&#123;</span><br><span class="line">        System.out.println(&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">      // 创建子类对象</span><br><span class="line">      Cat ddm = new Cat()；</span><br><span class="line">        // 调用父类继承而来的方法</span><br><span class="line">        ddm.run();</span><br><span class="line">      // 调用子类重写的方法</span><br><span class="line">      ddm.cry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Override重写注解-Override-注解，重写注解校验！"><a href="#Override重写注解-Override-注解，重写注解校验！" class="headerlink" title="@Override重写注解@Override:注解，重写注解校验！"></a>@Override重写注解@Override:注解，重写注解校验！</h2><p>这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。</p><p>建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错！</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态是出现在继承或者实现关系中的。<br>多态体现的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = new 子类/实现类构造器;</span><br><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure><p>有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">父类：</span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    空参构造</span><br><span class="line">    带全部参数的构造</span><br><span class="line">    get和set方法</span><br><span class="line"></span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(name + &quot;, &quot; + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类1：</span><br><span class="line">public class Administrator extends Person &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(&quot;管理员的信息为：&quot; + getName() + &quot;, &quot; + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类2：</span><br><span class="line">public class Student extends Person&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(&quot;学生的信息为：&quot; + getName() + &quot;, &quot; + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类3：</span><br><span class="line">public class Teacher extends Person&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(&quot;老师的信息为：&quot; + getName() + &quot;, &quot; + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试类：</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建三个对象，并调用register方法</span><br><span class="line"></span><br><span class="line">        Student s = new Student();</span><br><span class="line">        s.setName(&quot;张三&quot;);</span><br><span class="line">        s.setAge(18);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Teacher t = new Teacher();</span><br><span class="line">        t.setName(&quot;王建国&quot;);</span><br><span class="line">        t.setAge(30);</span><br><span class="line"></span><br><span class="line">        Administrator admin = new Administrator();</span><br><span class="line">        admin.setName(&quot;管理员&quot;);</span><br><span class="line">        admin.setAge(35);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        register(s);</span><br><span class="line">        register(t);</span><br><span class="line">        register(admin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //这个方法既能接收老师，又能接收学生，还能接收管理员</span><br><span class="line">    //只能把参数写成这三个类型的父类</span><br><span class="line">    public static void register(Person p)&#123;</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p>final： 不可改变，最终的含义。可以用于修饰类、方法和变量。<br>类：被修饰的类，不能被继承。<br>方法：被修饰的方法，不能被重写。<br>变量：被修饰的变量，有且仅能被赋值一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final class 类名 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现。我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类。<br>abstract是抽象的意思，用于修饰方法方法和类，修饰的方法是抽象方法，修饰的类是抽象类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract void run()；</span><br></pre></td></tr></table></figure><p>继承抽象类的子类必须重写父类所有的抽象方法。否则，该子类也必须声明为抽象类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">// 父类,抽象类</span><br><span class="line">abstract class Employee &#123;</span><br><span class="line">private String id;</span><br><span class="line">private String name;</span><br><span class="line">private double salary;</span><br><span class="line"></span><br><span class="line">public Employee() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Employee(String id, String name, double salary) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">this.name = name;</span><br><span class="line">this.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 抽象方法</span><br><span class="line">// 抽象方法必须要放在抽象类中</span><br><span class="line">abstract public void work();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义一个子类继承抽象类</span><br><span class="line">class Manager extends Employee &#123;</span><br><span class="line">public Manager() &#123;</span><br><span class="line">&#125;</span><br><span class="line">public Manager(String id, String name, double salary) &#123;</span><br><span class="line">super(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line">// 2.重写父类的抽象方法</span><br><span class="line">@Override</span><br><span class="line">public void work() &#123;</span><br><span class="line">System.out.println(&quot;管理其他人&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义一个子类继承抽象类</span><br><span class="line">class Cook extends Employee &#123;</span><br><span class="line">public Cook() &#123;</span><br><span class="line">&#125;</span><br><span class="line">public Cook(String id, String name, double salary) &#123;</span><br><span class="line">super(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void work() &#123;</span><br><span class="line">System.out.println(&quot;厨师炒菜多加点盐...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试类</span><br><span class="line">public class Demo10 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 创建抽象类,抽象类不能创建对象</span><br><span class="line">// 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象</span><br><span class="line">//Employee e = new Employee();</span><br><span class="line">//e.work();</span><br><span class="line"></span><br><span class="line">// 3.创建子类</span><br><span class="line">Manager m = new Manager();</span><br><span class="line">m.work();</span><br><span class="line"></span><br><span class="line">Cook c = new Cook(&quot;ap002&quot;, &quot;库克&quot;, 1);</span><br><span class="line">c.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义。抽象类可以强制让子类，一定要按照规定的格式进行重写。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h1&gt;&lt;p&gt;继承：就是子类继承父类的属性和行为，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的非私有的属性和行为。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>字符串的小结</title>
    <link href="http://example.com/2024/10/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/10/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-10-15T16:12:14.000Z</published>
    <updated>2024-10-16T13:29:00.302Z</updated>
    
    <content type="html"><![CDATA[<p>1.equals方法的作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = new String(chs);</span><br><span class="line">String s2 = new String(chs);</span><br><span class="line">System.out.println(s1.equals(s2));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.substring表示字符串截取<br>例如str.substring(0,3),就是截取前三位<br>str.substring(1)代表除了第一位不截取，其他都截</p><p>3.str.replace（”aaa”,”bbb”）<br>将字符串中的aaa全部转化成bbb</p><p>4.charAt(i)<br>表示截取字符串中的哪一位</p><p>5.StringBuilder<br>StringBuilder 可以看成是一个容器，创建之后里面的内容是可变的。<br>常用语字符串反转或者拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//1.创建对象</span><br><span class="line">       StringBuilder sb = new StringBuilder(&quot;abc&quot;);</span><br><span class="line"></span><br><span class="line">       //.添加元素</span><br><span class="line">       /*sb.append(1);</span><br><span class="line">       sb.append(2.3);</span><br><span class="line">       sb.append(true);*/</span><br><span class="line"></span><br><span class="line">       //反转</span><br><span class="line">       sb.reverse();</span><br><span class="line"></span><br><span class="line">       //获取长度</span><br><span class="line">       int len = sb.length();</span><br><span class="line">       System.out.println(len);</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>6.链式编程<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//1.创建对象</span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line"></span><br><span class="line">//2.添加字符串</span><br><span class="line">    sb.append(&quot;aaa&quot;).append(&quot;bbb&quot;).append(&quot;ccc&quot;).append(&quot;ddd&quot;);</span><br></pre></td></tr></table></figure></code></pre><p>7.StringJoiner<br>StringJoiner跟StringBuilder一样，也可以看成是一个容器，创建之后里面的内容是可变的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//1.创建一个对象，并指定中间的间隔符号</span><br><span class="line">StringJoiner sj = new StringJoiner(&quot;---&quot;);</span><br><span class="line">//2.添加元素</span><br><span class="line">sj.add(&quot;aaa&quot;).add(&quot;bbb&quot;).add(&quot;ccc&quot;);</span><br><span class="line">//3.打印结果</span><br><span class="line">System.out.println(sj);//aaa---bbb---ccc</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.equals方法的作用&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面向对象小结</title>
    <link href="http://example.com/2024/10/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%B0%8F%E7%BB%93/"/>
    <id>http://example.com/2024/10/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%B0%8F%E7%BB%93/</id>
    <published>2024-10-11T07:30:14.000Z</published>
    <updated>2024-10-11T08:38:01.409Z</updated>
    
    <content type="html"><![CDATA[<p>alt+insert可以直接生成方法，但是要放在类中，外面生成不了</p><p>ctrl+alt+l代码格式化</p><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>类是对现实生活中一类具有共同属性和行为的事物的抽象</p><p>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</p><p>对象：是能够看得到摸的着的真实存在的实体</p><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>类的定义步骤：</p><p>①定义类</p><p>②编写类的成员变量</p><p>③编写类的成员方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class 类名 &#123;</span><br><span class="line">// 成员变量</span><br><span class="line">变量1的数据类型 变量1；</span><br><span class="line">变量2的数据类型 变量2;</span><br><span class="line">…</span><br><span class="line">// 成员方法</span><br><span class="line">方法1;</span><br><span class="line">方法2;</span><br><span class="line">&#125;</span><br><span class="line">public class Phone &#123;</span><br><span class="line">    //成员变量</span><br><span class="line">    String brand;</span><br><span class="line">    int price;</span><br><span class="line"></span><br><span class="line">    //成员方法</span><br><span class="line">    public void call() &#123;</span><br><span class="line">        System.out.println(&quot;打电话&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sendMessage() &#123;</span><br><span class="line">        System.out.println(&quot;发短信&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><p>创建对象的格式：</p><p>类名 对象名 &#x3D; new 类名();</p><p>调用成员的格式：</p><p>对象名.成员变量</p><p>对象名.成员方法();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用对象</span><br><span class="line">    1：使用成员变量</span><br><span class="line">         格式：对象名.变量名</span><br><span class="line">         范例：p.brand</span><br><span class="line">    2：使用成员方法</span><br><span class="line">         格式：对象名.方法名()</span><br><span class="line">         范例：p.call()</span><br><span class="line">public class PhoneDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建对象</span><br><span class="line">        Phone p = new Phone();</span><br><span class="line"></span><br><span class="line">        //使用成员变量</span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        p.brand = &quot;小米&quot;;</span><br><span class="line">        p.price = 2999;</span><br><span class="line"></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        //使用成员方法</span><br><span class="line">        p.call();</span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用<br>分析：<br>成员变量：姓名，年龄…<br>成员方法：学习，做作业…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    //成员变量</span><br><span class="line">    String name;</span><br><span class="line">    int age;</span><br><span class="line"></span><br><span class="line">    //成员方法</span><br><span class="line">    public void study() &#123;</span><br><span class="line">        System.out.println(&quot;好好学习，天天向上&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void doHomework() &#123;</span><br><span class="line">        System.out.println(&quot;键盘敲烂，月薪过万&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">    学生测试类</span><br><span class="line"> */</span><br><span class="line">public class StudentDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建对象</span><br><span class="line">        Student s = new Student();</span><br><span class="line"></span><br><span class="line">        //使用对象</span><br><span class="line">        System.out.println(s.name + &quot;,&quot; + s.age);</span><br><span class="line"></span><br><span class="line">        s.name = &quot;林青霞&quot;;</span><br><span class="line">        s.age = 30;</span><br><span class="line"></span><br><span class="line">        System.out.println(s.name + &quot;,&quot; + s.age);</span><br><span class="line"></span><br><span class="line">        s.study();</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h2><p>private是一个修饰符，可以用来修饰成员（成员变量，成员方法）</p><p>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><p>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</p><p>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Student &#123;</span><br><span class="line">    //成员变量</span><br><span class="line">    String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    //提供get/set方法</span><br><span class="line">    public void setAge(int a) &#123;</span><br><span class="line">        if(a&lt;0 || a&gt;120) &#123;</span><br><span class="line">            System.out.println(&quot;你给的年龄有误&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //成员方法</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(name + &quot;,&quot; + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">    学生测试类</span><br><span class="line"> */</span><br><span class="line">public class StudentDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建对象</span><br><span class="line">        Student s = new Student();</span><br><span class="line">        //给成员变量赋值</span><br><span class="line">        s.name = &quot;林青霞&quot;;</span><br><span class="line">        s.setAge(30);</span><br><span class="line">        //调用show方法</span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）</p><p>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</p><p>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(name + &quot;,&quot; + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>无论是否使用，都手工书写无参数构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name,int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(name + &quot;,&quot; + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">    测试类</span><br><span class="line"> */</span><br><span class="line">public class StudentDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建对象</span><br><span class="line">        Student s1 = new Student();</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        //public Student(String name)</span><br><span class="line">        Student s2 = new Student(&quot;林青霞&quot;);</span><br><span class="line">        s2.show();</span><br><span class="line"></span><br><span class="line">        //public Student(int age)</span><br><span class="line">        Student s3 = new Student(30);</span><br><span class="line">        s3.show();</span><br><span class="line"></span><br><span class="line">        //public Student(String name,int age)</span><br><span class="line">        Student s4 = new Student(&quot;林青霞&quot;,30);</span><br><span class="line">        s4.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    //1.私有化全部的成员变量</span><br><span class="line">    //2.空参构造</span><br><span class="line">    //3.带全部参数的构造</span><br><span class="line">    //4.针对于每一个私有化的成员变量都要提供其对应的get和set方法</span><br><span class="line">    //5.如果当前事物还有其他行为，那么也要写出来，比如学生的吃饭，睡觉等行为</span><br><span class="line"></span><br><span class="line">    private String username;//用户名</span><br><span class="line">    private String password;//密码</span><br><span class="line">    private String email;//邮箱</span><br><span class="line">    private char gender;//性别</span><br><span class="line">    private int age;//年龄</span><br><span class="line"></span><br><span class="line">    //空参构造方法</span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //带全部参数的构造</span><br><span class="line">    public User(String username, String password, String email, char gender, int age) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">        this.password = password;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.gender = gender;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //get和set</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public char getGender() &#123;</span><br><span class="line">        return gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGender(char gender) &#123;</span><br><span class="line">        this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(username + &quot;在吃饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //写一个标准的javabean类</span><br><span class="line">        //咱们在课后只要能把这个标准的javabean能自己写出来，那么就表示今天的知识点就ok了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //利用空参构造创建对象</span><br><span class="line">        User u1 = new User();</span><br><span class="line">        //如果利用空参创建对象，还想赋值只能用set方法赋值</span><br><span class="line">        u1.setUsername(&quot;zhangsan&quot;);</span><br><span class="line">        u1.setPassword(&quot;1234qwer&quot;);</span><br><span class="line">        u1.setEmail(&quot;itheima@itcast.cn&quot;);</span><br><span class="line">        u1.setGender(&#x27;男&#x27;);</span><br><span class="line">        u1.setAge(23);</span><br><span class="line">        //获取属性的值并打印</span><br><span class="line">        System.out.println(u1.getUsername() + &quot;, &quot; + u1.getPassword()</span><br><span class="line">                + &quot;, &quot; + u1.getEmail() + &quot;, &quot; + u1.getGender() + &quot;, &quot; + u1.getAge());</span><br><span class="line">        u1.eat();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;=============================&quot;);</span><br><span class="line"></span><br><span class="line">        //简单的办法</span><br><span class="line">        //利用带全部参数的构造来创建对象</span><br><span class="line">        //快捷键:ctrl + p</span><br><span class="line">        User u2 = new User(&quot;lisi&quot;,&quot;12345678&quot;,&quot;lisi@itcast.cn&quot;,&#x27;女&#x27;,24);</span><br><span class="line">        System.out.println(u2.getUsername() + &quot;, &quot; + u2.getPassword()</span><br><span class="line">                + &quot;, &quot; + u2.getEmail() + &quot;, &quot; + u2.getGender() + &quot;, &quot; + u2.getAge());</span><br><span class="line">        u2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;alt+insert可以直接生成方法，但是要放在类中，外面生成不了&lt;/p&gt;
&lt;p&gt;ctrl+alt+l代码格式化&lt;/p&gt;
&lt;h1 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象&quot; class=&quot;headerlink&quot; title=&quot;类和对象&quot;&gt;&lt;/a&gt;类和对象&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>方法小结</title>
    <link href="http://example.com/2024/10/11/%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/10/11/%E6%96%B9%E6%B3%95/</id>
    <published>2024-10-11T06:00:14.000Z</published>
    <updated>2024-10-11T06:32:49.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法的概念"><a href="#方法的概念" class="headerlink" title="方法的概念"></a>方法的概念</h1><p> 方法（method）是程序中最小的执行单元<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> public static void 方法名 (   ) &#123;</span><br><span class="line">// 方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>调用<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method();</span><br></pre></td></tr></table></figure><br> 带参数方法定义和调用<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> public static void isEvenNumber(int number)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">public static void getMax(int num1, int num2)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 调用格式：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> isEvenNumber(10);</span><br><span class="line"></span><br><span class="line">getMax(10,20);</span><br></pre></td></tr></table></figure><br> 带返回值方法练习：<br> 需求：</p><p>​ 定义一个方法，求一家商场每个季度的营业额。根据方法结果再计算出全年营业额。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class MethodDemo9 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        /*需求：定义一个方法，求一家商场每个季度的营业额。</span><br><span class="line">        根据方法结果再计算出全年营业额。*/</span><br><span class="line">        int sum1 = getSum(10, 20, 30);</span><br><span class="line">        int sum2 = getSum(10, 20, 30);</span><br><span class="line">        int sum3 = getSum(10, 20, 30);</span><br><span class="line">        int sum4 = getSum(10, 20, 30);</span><br><span class="line"></span><br><span class="line">        int sum = sum1 + sum2 + sum3 + sum4;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //心得：</span><br><span class="line">    //1.我要干嘛？  决定了方法体   每个季度的营业额</span><br><span class="line">    //2.我干这件事情，需要什么才能完成？ 决定了形参 需要三个月的营业额 a b c</span><br><span class="line">    //3.我干完这件事情，看调用处是否需要使用方法的结果。   决定了返回值</span><br><span class="line">    //如果需要使用，那么必须返回</span><br><span class="line">    //如果不需要使用，可以返回也可以不返回</span><br><span class="line">    public static int getSum(int month1,int month2,int month3)&#123;</span><br><span class="line">        int sum = month1 + month2 + month3;</span><br><span class="line">        //因为方法的调用处，需要继续使用这个结果</span><br><span class="line">        //所以我们必须要把sum返回</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求：</p><p>​ 键盘录入两个圆的半径（整数），比较两个圆的面积。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class MethodDemo10 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //需求：键盘录入两个圆的半径（整数），比较两个圆的面积。</span><br><span class="line">        //键盘录入圆的半径</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入圆的半径&quot;);</span><br><span class="line">        int radii1 = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;请输入第二个圆的半径&quot;);</span><br><span class="line">        int radii2 = sc.nextInt();</span><br><span class="line">        double area1 = getArea(radii1);</span><br><span class="line">        double area2 = getArea(radii2);</span><br><span class="line">        if(area1 &gt; area2)&#123;</span><br><span class="line">            System.out.println(&quot;第一个圆更大&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;第二个圆更大&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //心得：</span><br><span class="line">    //1.我要干嘛？   求圆的面积</span><br><span class="line">    //2.我干这件事情，需要什么才能完成？        半径</span><br><span class="line">    //3.方法的调用处，是否需要继续使用方法的结果    要比较</span><br><span class="line">    public static double getArea(int radii) &#123;</span><br><span class="line">        double area = 3.14 * radii * radii;</span><br><span class="line">        return area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义方法时，要做到两个明确</p><p>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型<br>明确参数：主要是明确参数的类型和数量<br>调用方法时的注意：</p><p>void类型的方法，直接调用即可<br>非void类型的方法，推荐用变量接收调用</p><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p><p>多个方法在同一个类中<br>多个方法具有相同的方法名<br>多个方法的参数不相同，类型不同或者数量不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class MethodTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //调用方法</span><br><span class="line">        System.out.println(compare(10, 20));</span><br><span class="line">        System.out.println(compare((byte) 10, (byte) 20));</span><br><span class="line">        System.out.println(compare((short) 10, (short) 20));</span><br><span class="line">        System.out.println(compare(10L, 20L));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //int</span><br><span class="line">    public static boolean compare(int a, int b) &#123;</span><br><span class="line">        System.out.println(&quot;int&quot;);</span><br><span class="line">        return a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //byte</span><br><span class="line">    public static boolean compare(byte a, byte b) &#123;</span><br><span class="line">        System.out.println(&quot;byte&quot;);</span><br><span class="line">        return a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //short</span><br><span class="line">    public static boolean compare(short a, short b) &#123;</span><br><span class="line">        System.out.println(&quot;short&quot;);</span><br><span class="line">        return a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //long</span><br><span class="line">    public static boolean compare(long a, long b) &#123;</span><br><span class="line">        System.out.println(&quot;long&quot;);</span><br><span class="line">        return a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;方法的概念&quot;&gt;&lt;a href=&quot;#方法的概念&quot; class=&quot;headerlink&quot; title=&quot;方法的概念&quot;&gt;&lt;/a&gt;方法的概念&lt;/h1&gt;&lt;p&gt; 方法（method）是程序中最小的执行单元&lt;br&gt; &lt;figure class=&quot;highlight plaint</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组小结</title>
    <link href="http://example.com/2024/09/28/%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/09/28/%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-09-28T05:00:14.000Z</published>
    <updated>2024-09-28T05:26:45.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组指的是一种容器，可以同来存储同种数据类型的多个值。"><a href="#数组指的是一种容器，可以同来存储同种数据类型的多个值。" class="headerlink" title="数组指的是一种容器，可以同来存储同种数据类型的多个值。"></a>数组指的是一种容器，可以同来存储同种数据类型的多个值。</h3><h3 id="如何定义数组-数据类型-数组名-比如：int-array"><a href="#如何定义数组-数据类型-数组名-比如：int-array" class="headerlink" title="如何定义数组 数据类型 [  ] 数组名 比如：int [   ] array"></a>如何定义数组 数据类型 [  ] 数组名 比如：int [   ] array</h3><h3 id="数组的静态初始化​-数据类型-数组名-new-数据类型-元素1，元素2，元素3，元素4…"><a href="#数组的静态初始化​-数据类型-数组名-new-数据类型-元素1，元素2，元素3，元素4…" class="headerlink" title="数组的静态初始化​ 数据类型[] 数组名 &#x3D; new 数据类型[]{元素1，元素2，元素3，元素4…};"></a>数组的静态初始化​ 数据类型[] 数组名 &#x3D; new 数据类型[]{元素1，元素2，元素3，元素4…};</h3><h3 id="比如：​-int-arr-new-int-11-22-33"><a href="#比如：​-int-arr-new-int-11-22-33" class="headerlink" title="比如：​ int[  ] arr &#x3D; new int[  ]{11,22,33};"></a>比如：​ int[  ] arr &#x3D; new int[  ]{11,22,33};</h3><h3 id="double-arr-new-double-1-1-1-2-1-3"><a href="#double-arr-new-double-1-1-1-2-1-3" class="headerlink" title="double[] arr &#x3D; new double[  ]{1.1,1.2,1.3};"></a>double[] arr &#x3D; new double[  ]{1.1,1.2,1.3};</h3><h3 id="索引一定是从0开始不断增加。"><a href="#索引一定是从0开始不断增加。" class="headerlink" title="索引一定是从0开始不断增加。"></a>索引一定是从0开始不断增加。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数组的遍历</span><br><span class="line">for(int i = 0; i &lt; arr.length; i++)&#123;</span><br><span class="line">    //在循环的过程中，i依次表示数组中的每一个索引</span><br><span class="line">    sout(arr[i]);//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="当数组的内容不确定时可用动态数组"><a href="#当数组的内容不确定时可用动态数组" class="headerlink" title="当数组的内容不确定时可用动态数组"></a>当数组的内容不确定时可用动态数组</h2><p>数据类型[] 数组名 &#x3D; new 数据类型[数组的长度];</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//1.定义一个数组，存3个人的年龄，年龄未知</span><br><span class="line">int[] agesArr = new int[3];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。</span><br><span class="line">int[] scoresArr = new int[10];</span><br></pre></td></tr></table></figure><h2 id="练习-统计个数"><a href="#练习-统计个数" class="headerlink" title="练习 统计个数"></a>练习 统计个数</h2><h4 id="需求：生成10个1-100之间的随机数存入数"><a href="#需求：生成10个1-100之间的随机数存入数" class="headerlink" title="需求：生成10个1~100之间的随机数存入数"></a>需求：生成10个1~100之间的随机数存入数</h4><p>1）求出所有数据的和<br>2）求所有数据的平均数<br>3）统计有多少个数据比平均值小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//分析：</span><br><span class="line">//1.定义数组</span><br><span class="line">int[] arr = new int[10];</span><br><span class="line">//2.把随机数存入到数组当中</span><br><span class="line">Random r = new Random();</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    //每循环一次，就会生成一个新的随机数</span><br><span class="line">    int number = r.nextInt(100) + 1;</span><br><span class="line">    //把生成的随机数添加的数组当中</span><br><span class="line">    //数组名[索引] = 数据;</span><br><span class="line">    arr[i] = number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 1）求出所有数据的和</span><br><span class="line">//定义求和变量</span><br><span class="line">int sum = 0;</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    //循环得到每一个元素</span><br><span class="line">    //并把元素累加到sum当中</span><br><span class="line">    sum = sum + arr[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;数组中所有数据的和为：&quot; + sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//2）求所有数据的平均数</span><br><span class="line">int avg = sum / arr.length;</span><br><span class="line">System.out.println(&quot;数组中平均数为：&quot; + avg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//3）统计有多少个数据比平均值小</span><br><span class="line">int count = 0;</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    if(arr[i] &lt; avg)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//当循环结束之后，就表示我已经找到了所有的比平均数小的数据</span><br><span class="line">System.out.println(&quot;在数组中，一共有&quot; + count + &quot;个数据，比平均数小&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//遍历数组，验证答案</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + &quot; &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交换数据"><a href="#交换数据" class="headerlink" title="交换数据"></a>交换数据</h2><h4 id="需求：定义一个数组，存入1-2-3-4-5。按照要求交换索引对应的元素。"><a href="#需求：定义一个数组，存入1-2-3-4-5。按照要求交换索引对应的元素。" class="headerlink" title="需求：定义一个数组，存入1,2,3,4,5。按照要求交换索引对应的元素。"></a>需求：定义一个数组，存入1,2,3,4,5。按照要求交换索引对应的元素。</h4><p>交换前：1,2,3,4,5</p><p>交换后：5,2,3,4,1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//1.定义数组存储数据</span><br><span class="line">int[] arr = &#123;1,2,3,4,5&#125;;</span><br><span class="line">//2.利用循环去交换数据</span><br><span class="line">for(int i = 0,j = arr.length - 1; i &lt; j; i++,j--)&#123;</span><br><span class="line">    //交换变量i和变量j指向的元素</span><br><span class="line">    int temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">//当循环结束之后，那么数组中的数据就实现了头尾交换</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + &quot; &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数组指的是一种容器，可以同来存储同种数据类型的多个值。&quot;&gt;&lt;a href=&quot;#数组指的是一种容器，可以同来存储同种数据类型的多个值。&quot; class=&quot;headerlink&quot; title=&quot;数组指的是一种容器，可以同来存储同种数据类型的多个值。&quot;&gt;&lt;/a&gt;数组指的是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java即将开始数组的学习</title>
    <link href="http://example.com/2024/09/27/javaday2/"/>
    <id>http://example.com/2024/09/27/javaday2/</id>
    <published>2024-09-27T00:00:14.000Z</published>
    <updated>2024-09-27T00:03:37.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="经过这两天的java学习，我重新对while循环和for循环有了新的认知，同时掌握了Scanner输入语句的使用，对普通的算法编程也逐渐熟悉，能够通过自己的思路对问题进行代码编写。"><a href="#经过这两天的java学习，我重新对while循环和for循环有了新的认知，同时掌握了Scanner输入语句的使用，对普通的算法编程也逐渐熟悉，能够通过自己的思路对问题进行代码编写。" class="headerlink" title="经过这两天的java学习，我重新对while循环和for循环有了新的认知，同时掌握了Scanner输入语句的使用，对普通的算法编程也逐渐熟悉，能够通过自己的思路对问题进行代码编写。"></a>经过这两天的java学习，我重新对while循环和for循环有了新的认知，同时掌握了Scanner输入语句的使用，对普通的算法编程也逐渐熟悉，能够通过自己的思路对问题进行代码编写。</h2><h3 id="通过我和老师的探讨，我过几天可能需要对linux也进行学习，这是大数据非常重要的一部分，我到时候也会更新linux的学习过程，加油！"><a href="#通过我和老师的探讨，我过几天可能需要对linux也进行学习，这是大数据非常重要的一部分，我到时候也会更新linux的学习过程，加油！" class="headerlink" title="通过我和老师的探讨，我过几天可能需要对linux也进行学习，这是大数据非常重要的一部分，我到时候也会更新linux的学习过程，加油！"></a>通过我和老师的探讨，我过几天可能需要对linux也进行学习，这是大数据非常重要的一部分，我到时候也会更新linux的学习过程，加油！</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;经过这两天的java学习，我重新对while循环和for循环有了新的认知，同时掌握了Scanner输入语句的使用，对普通的算法编程也逐渐熟悉，能够通过自己的思路对问题进行代码编写。&quot;&gt;&lt;a href=&quot;#经过这两天的java学习，我重新对while循环和for循环</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开始java的学习~</title>
    <link href="http://example.com/2024/09/23/javaday1/"/>
    <id>http://example.com/2024/09/23/javaday1/</id>
    <published>2024-09-22T16:12:14.000Z</published>
    <updated>2024-09-23T08:35:31.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这两天学习大数据的时候，在看HDFS时发现需要java的基本功，所以今天开始学习java，目标一月内搞定，加油呀！！"><a href="#这两天学习大数据的时候，在看HDFS时发现需要java的基本功，所以今天开始学习java，目标一月内搞定，加油呀！！" class="headerlink" title="这两天学习大数据的时候，在看HDFS时发现需要java的基本功，所以今天开始学习java，目标一月内搞定，加油呀！！"></a>这两天学习大数据的时候，在看HDFS时发现需要java的基本功，所以今天开始学习java，目标一月内搞定，加油呀！！</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;这两天学习大数据的时候，在看HDFS时发现需要java的基本功，所以今天开始学习java，目标一月内搞定，加油呀！！&quot;&gt;&lt;a href=&quot;#这两天学习大数据的时候，在看HDFS时发现需要java的基本功，所以今天开始学习java，目标一月内搞定，加油呀！！&quot; cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>xsync以及ssh免密登录配置</title>
    <link href="http://example.com/2024/08/19/1.xsync%E4%BB%A5%E5%8F%8Assh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2024/08/19/1.xsync%E4%BB%A5%E5%8F%8Assh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE/</id>
    <published>2024-08-19T14:51:42.000Z</published>
    <updated>2024-08-19T15:07:09.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日小结"><a href="#今日小结" class="headerlink" title="今日小结"></a>今日小结</h2><h3 id="今天学习了xsync集群分发脚本-配置完环境后使用xsync-目标路径就可将一台虚拟机的配置文件直接分享到另外几台服务器上，省去了配置的时间消耗，十分的方便快捷。"><a href="#今天学习了xsync集群分发脚本-配置完环境后使用xsync-目标路径就可将一台虚拟机的配置文件直接分享到另外几台服务器上，省去了配置的时间消耗，十分的方便快捷。" class="headerlink" title="今天学习了xsync集群分发脚本,配置完环境后使用xsync+目标路径就可将一台虚拟机的配置文件直接分享到另外几台服务器上，省去了配置的时间消耗，十分的方便快捷。"></a>今天学习了xsync集群分发脚本,配置完环境后使用xsync+目标路径就可将一台虚拟机的配置文件直接分享到另外几台服务器上，省去了配置的时间消耗，十分的方便快捷。</h3><h3 id="不过还是会要输入密码才能获取其他虚拟机的权限，因此我们采用ssh免密登录即可以后都省去输入密码的环节。"><a href="#不过还是会要输入密码才能获取其他虚拟机的权限，因此我们采用ssh免密登录即可以后都省去输入密码的环节。" class="headerlink" title="不过还是会要输入密码才能获取其他虚拟机的权限，因此我们采用ssh免密登录即可以后都省去输入密码的环节。"></a>不过还是会要输入密码才能获取其他虚拟机的权限，因此我们采用ssh免密登录即可以后都省去输入密码的环节。</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>1.我们先切换到 .ssh的路径下通过ssh-keygen -t rsa获取公钥和私钥。id_rsa（私钥）、id_rsa.pub（公钥） </p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>2.三台虚拟机分别执行ssh-copy-id hadoop102， ssh-copy-id hadoop103 ，ssh-copy-id hadoop104，从而可以获取彼此的免密登录，今后无论是互相登录还是传输文件都不需要在输入密码了，更加的丝滑。</p><h3 id="明天继续加油吧！"><a href="#明天继续加油吧！" class="headerlink" title="明天继续加油吧！"></a>明天继续加油吧！</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;今日小结&quot;&gt;&lt;a href=&quot;#今日小结&quot; class=&quot;headerlink&quot; title=&quot;今日小结&quot;&gt;&lt;/a&gt;今日小结&lt;/h2&gt;&lt;h3 id=&quot;今天学习了xsync集群分发脚本-配置完环境后使用xsync-目标路径就可将一台虚拟机的配置文件直接分享到另外几台</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>&#39;学习大数据的碎碎念（记录）&#39;</title>
    <link href="http://example.com/2024/08/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://example.com/2024/08/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%A2%8E%E7%A2%8E%E5%BF%B5/</id>
    <published>2024-08-17T16:12:14.000Z</published>
    <updated>2024-08-18T14:10:29.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="大家好，我是一名24级计算机的研究生，研究方向是大数据存储技术，以后想走大数据开发方向，目前是个小白，想用此网站记录一下自己的学习经历和过程，大家一起加油吧！"><a href="#大家好，我是一名24级计算机的研究生，研究方向是大数据存储技术，以后想走大数据开发方向，目前是个小白，想用此网站记录一下自己的学习经历和过程，大家一起加油吧！" class="headerlink" title="大家好，我是一名24级计算机的研究生，研究方向是大数据存储技术，以后想走大数据开发方向，目前是个小白，想用此网站记录一下自己的学习经历和过程，大家一起加油吧！"></a>大家好，我是一名24级计算机的研究生，研究方向是大数据存储技术，以后想走大数据开发方向，目前是个小白，想用此网站记录一下自己的学习经历和过程，大家一起加油吧！</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;大家好，我是一名24级计算机的研究生，研究方向是大数据存储技术，以后想走大数据开发方向，目前是个小白，想用此网站记录一下自己的学习经历和过程，大家一起加油吧！&quot;&gt;&lt;a href=&quot;#大家好，我是一名24级计算机的研究生，研究方向是大数据存储技术，以后想走大数据开发</summary>
      
    
    
    
    
  </entry>
  
</feed>
